name: Promote dev → main (weekly)

on:
  schedule:
    - cron: "0 9 * * MON"   # every Monday 09:00 UTC; tweak if you want
  workflow_dispatch:

permissions:
  contents: write           # open PR
  pull-requests: write      # enable auto-merge
  security-events: read     # read code scanning alerts
  actions: read
  checks: read

concurrency:
  group: promote-dev-to-main
  cancel-in-progress: false

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Compare, guard, open PR, enable auto-merge (SQUASH)
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // 1) Is dev ahead of main?
            const cmp = await github.rest.repos.compareCommits({
              owner, repo, base: 'main', head: 'dev'
            });
            if (cmp.data.ahead_by === 0) {
              core.notice('dev is not ahead of main; nothing to promote.');
              return;
            }

            // 2) Block if dev has High/Critical code scanning alerts
            const alerts = await github.paginate(
              github.rest.codeScanning.listAlertsForRepo,
              { owner, repo, ref: 'dev', state: 'open', per_page: 100 }
            );
            const bad = alerts.filter(a => {
              const sev = String(a.rule?.security_severity_level || '').toLowerCase();
              return sev === 'high' || sev === 'critical';
            });
            if (bad.length) {
              core.setFailed(`Blocked: ${bad.length} open High/Critical code scanning alerts on 'dev'.`);
              return;
            }

            // 3) Create or reuse PR dev → main
            const open = await github.rest.pulls.list({
              owner, repo, state: 'open', base: 'main', head: `${owner}:dev`
            });
            let prNumber, prNodeId;
            if (open.data.length) {
              prNumber = open.data[0].number;
              prNodeId = open.data[0].node_id;
              core.notice(`PR #${prNumber} already open.`);
            } else {
              const pr = await github.rest.pulls.create({
                owner, repo, base: 'main', head: 'dev',
                title: 'Weekly promote dev → main',
                body: 'Automated PR from dev → main. Auto-merge will complete after required checks pass.'
              });
              prNumber = pr.data.number;
              prNodeId = pr.data.node_id;
              core.notice(`Opened PR #${prNumber}.`);
            }

            // 4) Enable auto-merge (SQUASH)
            const result = await github.graphql(
              `mutation($pullRequestId: ID!, $method: PullRequestMergeMethod!) {
                 enablePullRequestAutoMerge(input: { pullRequestId: $pullRequestId, mergeMethod: $method }) {
                   pullRequest { number }
                 }
               }`,
              { pullRequestId: prNodeId, method: 'SQUASH' }
            );
            core.notice(`Auto-merge (SQUASH) enabled on PR #${prNumber}.`)
